#
# Application Configuration
#

# Global
# github.token= REQUIRED: set as parameter or GITHUB_TOKEN environment variable
github.users=aureamunoz,cmoulliard,geoand,gytis,iocanel,jacobdotcosta,metacosm

# Bridge
github.bridge.enabled=false
%dev.github.bridge.enabled=false
%prod.github.bridge.enabled=true

github.bridge.terminal-label.name=upstream/closed
github.bridge.terminal-label.description=The issue has been closed upstream
github.bridge.terminal-label.color=a9f466

github.bridge.auto-label.name=7 - Community development
github.bridge.auto-label.description=Development around upstream/community projects
github.bridge.auto-label.color=cc9c18

github.bridge.source-repos=quarkusio/quarkus,fabric8io/kubernetes-client,spring-cloud/spring-cloud-kubernetes,openshift/odo
github.bridge.target-organization=snowdrop-zen

# Reporting
github.reporting.enabled=true
%dev.github.reporting.enabled=false
%prod.github.reporting.enabled=true

github.reporting.organizations=snowdrop,snowdrop-bot,snowdrop-zen,quarkusio,halkyonio,dekorateio,spring-cloud,fabric8io,sundrio,openshift

#This option allows us to directly specify repositories in the form <username>/<repo> without checking for forks etc.
github.reporting.additional.repositories=halkyonio/hal,halkyonio/operator,halkyonio/api,halkyonio/container-images\
  ,snowdrop/k8s-infra,snowdrop/snowdrop-automation-client,snowdrop/team,snowdrop/spring-boot-bom,snowdrop/narayana-spring-boot,snowdrop/vertx-spring-boot,snowdrop/spring-cloud-stream-binder-artemis\
  ,snowdrop/health-check-example,snowdrop/cache-example\
  ,snowdrop-bot/snowdrop-bot
#  ,snowdrop-zen/quarkus,snowdrop-zen/odo,snowdrop-zen/spring-cloud-kubernetes,snowdrop-zen/kubernetes-client
#  ,quarkusio/quarkus,quarkusio/quarkus-spring-api

github.reporting.target.organization=snowdrop
github.reporting.target.repository=reports

# Production Profile: Enable Bridge and Reporitng on startup

# Jira
jira.url=https://issues.redhat.com
jira.reporting.repos=ENTSBT
jira.users=


##########
# Report #
##########
report.weekly.name=Weekly Report

report.state.closed=  ![#a9a9a9](https://via.placeholder.com/15/a9a9a9/000000?text=+)
report.state.open=  ![#00ff00](https://via.placeholder.com/15/00ff00/000000?text=+)
report.state.old=  ![#ffaa00](https://via.placeholder.com/15/ffaa00/000000?text=+)
report.state.ancient=  ![#ff0000](https://via.placeholder.com/15/ff0000/000000?text=+)


############
# Database #
############
#
# Hibernate Configuraton
#

quarkus.datasource.url=jdbc:h2:/z/var/snowdrop-bot/data/env/h2-bot-db/bot.db;DB_CLOSE_ON_EXIT=FALSE
quarkus.datasource.driver=org.h2.Driver
quarkus.datasource.username=quarkus
quarkus.datasource.password=quarkus
quarkus.datasource.min-size=3
quarkus.datasource.max-size=13
quarkus.hibernate-orm.database.generation=drop-and-create

%dev.quarkus.datasource.url=jdbc:h2:mem:snowdrop-bot;DB_CLOSE_DELAY=-1;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:import-dev-clear.sql'
%dev.quarkus.datasource.driver=org.h2.Driver
%dev.quarkus.datasource.username=quarkus
%dev.quarkus.datasource.password=quarkus
%dev.quarkus.datasource.min-size=3
%dev.quarkus.datasource.max-size=13
%dev.quarkus.hibernate-orm.database.generation=drop-and-create

# Production Profle: Use global path for file persistance.
# ;INIT=RUNSCRIPT FROM 'classpath:import.sql'
%prod.quarkus.datasource.url=jdbc:h2:/z/var/snowdrop-bot/data/prod/snowdrop-bot/db/bot.db;DB_CLOSE_ON_EXIT=FALSE
%prod.quarkus.datasource.driver=org.h2.Driver
%prod.quarkus.datasource.username=quarkus
%prod.quarkus.datasource.password=quarkus
%prod.quarkus.datasource.min-size=3
%prod.quarkus.datasource.max-size=13
%prod.quarkus.hibernate-orm.database.generation=update

#
# Google Docs Configuration
#

google.docs.credentials.file=~/.snowdrop-bot/google/credentials.json
#Production Profile: Read credentials
%prod.google.docs.credentials.file=~/.goog-dev/.credentials_redhat.com.json

# Official weekly status report
#google.docs.report.document-id=1LEFbGqT1mevdHWT9SGDAZLFcUVhZqjCzGUaHXHtujr0

# Development status report
google.docs.report.document-id=1WPefEYU_KUG8QdsqV3-mwdVUaL9tlUm1A5nKsVgDWGE

#
# Kubernetes Manifest Configuration
#

quarkus.kubernetes.deployment-target=openshift, kubernetes

# Kubernetes specific resources
quarkus.kubernetes.part-of=snowdrop-bot
quarkus.kubernetes.secret-volumes.snowdrop-googledocs=snowdrop-googledocs
quarkus.kubernetes.env-vars.snowdrop-github.secret=snowdrop-github

# Mount PVC volume
quarkus.kubernetes.pvc-volumes.snowdrop-db.claim-name=snwodrop-db-claim
quarkus.kubernetes.mounts.snowdrop-db.path=/z/var/snowdrop-bot/data/db
quarkus.kubernetes.mounts.snowdrop-googledocs.path=/z/var/snowdrop-bot/google

# Openshift specific resources
quarkus.openshift.part-of=snowdrop-bot
quarkus.openshift.secret-volumes.snowdrop-googledocs=snowdrop-googledocs
quarkus.openshift.env-vars.snowdrop-github.secret=snowdrop-github

# Mount PVC volume
quarkus.openshift.pvc-volumes.snowdrop-db.claim-name=snwodrop-db-claim
quarkus.openshift.mounts.snowdrop-db.path=/z/var/snowdrop-bot/data/db
quarkus.openshift.mounts.snowdrop-googledocs.path=/z/var/snowdrop-bot/google


quarkus.kubernetes-client.trust-certs=true

############
# Security #
############
quarkus.http.auth.basic=true

quarkus.security.jdbc.enabled=true

# Users and Roles
quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.role FROM bot_user u WHERE u.username=?
quarkus.security.jdbc.principal-query.clear-password-mapper.enabled=true
quarkus.security.jdbc.principal-query.clear-password-mapper.password-index=1
quarkus.security.jdbc.principal-query.attribute-mappings.0.index=2
quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups

# Hashed password (TBD)
#quarkus.security.jdbc.principal-query.sql=SELECT u.password, u.salt, u.iterations, u.role FROM bot_user u WHERE u.username=?
#quarkus.security.jdbc.principal-query.bcrypt-password-mapper.enabled=true
#quarkus.security.jdbc.principal-query.bcrypt-password-mapper.password-index=1
#quarkus.security.jdbc.principal-query.bcrypt-password-mapper.salt-index=2
#quarkus.security.jdbc.principal-query.bcrypt-password-mapper.iteration-count-index=3
#quarkus.security.jdbc.principal-query.attribute-mappings.0.index=4
#quarkus.security.jdbc.principal-query.attribute-mappings.0.to=groups
#quarkus.security.jdbc.principal-query.bcrypt-password-mapper.hash-encoding=BASE64

# Roles (TBD)
#quarkus.security.jdbc.principal-query.roles.sql=SELECT nb.berechtigungen_name FROM roles n JOIN nutzer_berechtigung nb ON nb.nutzers_nutzername = n.nutzername WHERE n.nutzername=?
#quarkus.security.jdbc.principal-query.roles.datasource=permissions
#quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.index=1
#quarkus.security.jdbc.principal-query.roles.attribute-mappings.0.to=groups

quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin
quarkus.http.auth.permission.roles1.paths=/weeklyreport/*,/bridge/*,/reporting/*,/docs/*
quarkus.http.auth.permission.roles1.policy=role-policy1

quarkus.http.auth.policy.role-policy2.roles-allowed=admin
quarkus.http.auth.permission.roles2.paths=/associate/*,/security/*,/security/user/*
quarkus.http.auth.permission.roles2.policy=role-policy2

quarkus.http.auth.permission.permit1.paths=/public/*,/css/*,/js/*,/robots.txt,/security/user/mock
quarkus.http.auth.permission.permit1.policy=permit
quarkus.http.auth.permission.permit1.methods=GET,HEAD

quarkus.http.auth.permission.deny1.paths=/forbidden
quarkus.http.auth.permission.deny1.policy=deny
